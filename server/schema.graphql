# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddMemberInput {
  role: String!
  teamId: ID!
  userId: ID!
}

type AuthPayload {
  token: String!
  user: UserType!
}

input CreateTeamInput {
  description: String
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input EmailAuthInput {
  email: String!
  password: String!
  username: String
}

input GitHubAuthInput {
  avatarUrl: String
  email: String!
  githubId: String!
  username: String!
}

type MemberType {
  joinedAt: DateTimeISO!
  role: String!
  user: UserType!
}

type Mutation {
  acceptInvitation(invitationId: String!, notificationId: String!): TeamType!
  addMember(input: AddMemberInput!): TeamType!
  addMemberToProject(memberId: String!, projectId: String!): ProjectType!
  createProject(createdBy: String!, description: String, dueDate: String!, name: String!, priority: ProjectPriority!, starred: Boolean = false, team: [String!]): ProjectType!
  createTeam(input: CreateTeamInput!): TeamType!
  loginWithEmail(input: EmailAuthInput!): AuthPayload!
  loginWithGitHub(input: GitHubAuthInput!): AuthPayload!
  signupWithEmail(input: EmailAuthInput!): AuthPayload!
}

type NotificationMetadata {
  invitationId: String
  inviterId: String
  teamId: String
}

"""The priority level of a project."""
enum ProjectPriority {
  high
  low
  medium
}

"""The status of a project."""
enum ProjectStatus {
  completed
  inProgress
  onHold
  planning
}

"""The Project model"""
type ProjectType {
  """When the project was created"""
  createdAt: DateTimeISO

  """The ID of the user who created the project"""
  createdBy: ID!

  """A description of the project"""
  description: String

  """The due date of the project"""
  dueDate: DateTimeISO!
  id: ID!

  """The name of the project"""
  name: String!

  """The project's priority"""
  priority: ProjectPriority!

  """The progress percentage of the project"""
  progress: Float!

  """Whether the project is starred"""
  starred: Boolean!

  """The current status of the project"""
  status: ProjectStatus!

  """IDs of team members involved in the project"""
  team: [String!]!

  """When the project was last updated"""
  updatedAt: DateTimeISO
}

type Query {
  getNotifications: [notificationType!]!
  getTeam(id: String!): TeamType!
  project(id: String!): ProjectType
  projects: [ProjectType!]!
  searchUsers(search: String!): [UserType!]!
  teams: [TeamType!]!
}

type TeamType {
  createdAt: DateTimeISO!
  description: String
  id: ID!
  members: [MemberType!]!
  name: String!
  owner: UserType!
  projectsCount: Float
  updatedAt: DateTimeISO!
}

type UserType {
  avatarUrl: String
  createdAt: DateTimeISO!
  email: String!
  githubId: String
  id: ID!
  projects: [ProjectType!]!
  teams: [TeamType!]!
  username: String!
}

type notificationType {
  content: String!
  createdAt: DateTimeISO!
  id: ID!
  metadata: NotificationMetadata
  recepientId: ID!
  status: String!
  type: String!
}