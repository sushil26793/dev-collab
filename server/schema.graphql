# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddMemberInput {
  role: String!
  teamId: ID!
  userId: ID!
}

type AuthPayload {
  token: String!
  user: UserType!
}

input CreateTeamInput {
  description: String
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input EmailAuthInput {
  email: String!
  password: String!
  username: String
}

input GitHubAuthInput {
  avatarUrl: String
  email: String!
  githubId: String!
  username: String!
}

type MemberType {
  joinedAt: DateTimeISO!
  role: String!
  user: UserType!
}

type Mutation {
  acceptInvitation(invitationId: String!, notificationId: String!): TeamType!
  addMember(input: AddMemberInput!): TeamType!
  createProject(description: String, title: String!): ProjectType!
  createTask(description: String, projectId: String!, title: String!): TaskType!
  createTeam(input: CreateTeamInput!): TeamType!
  loginWithEmail(input: EmailAuthInput!): AuthPayload!
  loginWithGitHub(input: GitHubAuthInput!): AuthPayload!
  signupWithEmail(input: EmailAuthInput!): AuthPayload!
  updateTaskStatus(status: String!, taskId: String!): TaskType!
}

type NotificationMetadata {
  invitationId: String
  inviterId: String
  teamId: String
}

type ProjectType {
  createdAt: DateTimeISO!
  description: String
  id: ID!
  members: [UserType!]!
  owner: UserType!
  tasks: [TaskType!]!
  title: String!
  updatedAt: DateTimeISO!
}

type Query {
  getNotifications: [notificationType!]!
  getTeam(id: String!): TeamType!
  getUserProjects: [ProjectType!]!
  searchUsers(search: String!): [UserType!]!
  teams: [TeamType!]!
}

enum TaskStatus {
  DONE
  IN_PROGRESS
  TODO
}

type TaskType {
  assignedTo: UserType
  description: String
  id: ID!
  status: TaskStatus!
  title: String!
}

type TeamType {
  createdAt: DateTimeISO!
  description: String
  id: ID!
  members: [MemberType!]!
  name: String!
  owner: UserType!
  projectsCount: Float
  updatedAt: DateTimeISO!
}

type UserType {
  avatarUrl: String
  createdAt: DateTimeISO!
  email: String!
  githubId: String
  id: ID!
  projects: [ProjectType!]!
  teams: [TeamType!]!
  username: String!
}

type notificationType {
  content: String!
  createdAt: DateTimeISO!
  id: ID!
  metadata: NotificationMetadata
  recepientId: ID!
  status: String!
  type: String!
}